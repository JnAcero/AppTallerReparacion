// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistencia;

#nullable disable

namespace Persistencia.Migrations
{
    [DbContext(typeof(TallerRepDbContext))]
    [Migration("20230808113146_newMaxLength")]
    partial class newMaxLength
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Dominio.Entities.Arl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NombreArl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Arl");
                });

            modelBuilder.Entity("Dominio.Entities.Cargo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NombreCargo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Cargos");
                });

            modelBuilder.Entity("Dominio.Entities.CategoriaProducto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NombreCategoria")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("CategoriasProductos");
                });

            modelBuilder.Entity("Dominio.Entities.Ciudad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Ciudades");
                });

            modelBuilder.Entity("Dominio.Entities.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("NumIdentificacion")
                        .HasColumnType("int");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Dominio.Entities.ClienteSucursal", b =>
                {
                    b.Property<int>("SucursalId")
                        .HasColumnType("int");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.HasKey("SucursalId", "ClienteId");

                    b.HasIndex("ClienteId");

                    b.ToTable("ClientesSucursales");
                });

            modelBuilder.Entity("Dominio.Entities.Compra", b =>
                {
                    b.Property<int>("RefCompra")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCompra")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MetodoPago")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ProveedorId")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("SucursalId")
                        .HasColumnType("int");

                    b.Property<string>("TerminosCondiciones")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("RefCompra");

                    b.HasIndex("ProveedorId");

                    b.HasIndex("SucursalId");

                    b.ToTable("Compras");
                });

            modelBuilder.Entity("Dominio.Entities.CompraProductoP", b =>
                {
                    b.Property<int>("CompraId")
                        .HasColumnType("int");

                    b.Property<int>("ProductoProveedorId")
                        .HasColumnType("int");

                    b.HasKey("CompraId", "ProductoProveedorId");

                    b.HasIndex("ProductoProveedorId");

                    b.ToTable("ComprasProductosP");
                });

            modelBuilder.Entity("Dominio.Entities.Contacto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext");

                    b.Property<string>("Parentesco")
                        .HasColumnType("longtext");

                    b.Property<string>("Telefono")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Contactos");
                });

            modelBuilder.Entity("Dominio.Entities.ContactoEmpleado", b =>
                {
                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int");

                    b.Property<int>("ContactoId")
                        .HasColumnType("int");

                    b.HasKey("EmpleadoId", "ContactoId");

                    b.HasIndex("ContactoId");

                    b.ToTable("ContactosEmpleados");
                });

            modelBuilder.Entity("Dominio.Entities.DetalleReparacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Costo")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("longtext");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("DetalleReparaciones");
                });

            modelBuilder.Entity("Dominio.Entities.DiagnosticoEmpleado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("OrdenReparacionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("OrdenReparacionId");

                    b.ToTable("DiagnosticosEmpleados");
                });

            modelBuilder.Entity("Dominio.Entities.DiagnosticoInicial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DiagnosticoCliente")
                        .HasColumnType("longtext");

                    b.Property<int>("OrdenReparacionId")
                        .HasColumnType("int");

                    b.Property<string>("TiempoEstimadoReparacion")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("OrdenReparacionId")
                        .IsUnique();

                    b.ToTable("DiagnosticosIniciales");
                });

            modelBuilder.Entity("Dominio.Entities.Empleado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("FechaCumpleaños")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaIngreso")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdArl")
                        .HasColumnType("int");

                    b.Property<int>("IdCargo")
                        .HasColumnType("int");

                    b.Property<int>("IdEps")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("NumIdentificacion")
                        .HasColumnType("int");

                    b.Property<decimal>("Salario")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("SucursalId")
                        .HasColumnType("int");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("TipoContratacion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("IdArl");

                    b.HasIndex("IdCargo");

                    b.HasIndex("IdEps");

                    b.HasIndex("IdUsuario");

                    b.HasIndex("SucursalId");

                    b.ToTable("Empleados");
                });

            modelBuilder.Entity("Dominio.Entities.Eps", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NombreEps")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Eps");
                });

            modelBuilder.Entity("Dominio.Entities.Factura", b =>
                {
                    b.Property<int>("NumeroFactura")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaFacturacion")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("OrdenReparacionId")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalPagar")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("ValorManoObra")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("ValorReparacion")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("NumeroFactura");

                    b.HasIndex("OrdenReparacionId")
                        .IsUnique();

                    b.ToTable("Facturas");
                });

            modelBuilder.Entity("Dominio.Entities.InspeccionInicial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("EstadoCabina")
                        .HasColumnType("longtext");

                    b.Property<string>("EstadoFluidos")
                        .HasColumnType("longtext");

                    b.Property<string>("EstadoMotor")
                        .HasColumnType("longtext");

                    b.Property<string>("EstadoPuertas")
                        .HasColumnType("longtext");

                    b.Property<string>("EstadoRadio")
                        .HasColumnType("longtext");

                    b.Property<int>("OrdenReparacionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrdenReparacionId")
                        .IsUnique();

                    b.ToTable("InspeccionesIniciales");
                });

            modelBuilder.Entity("Dominio.Entities.OrdenDetalleReparacion", b =>
                {
                    b.Property<int>("DetalleReparacionId")
                        .HasColumnType("int");

                    b.Property<int>("OrdenReparacionId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductoId")
                        .HasColumnType("int");

                    b.HasKey("DetalleReparacionId", "OrdenReparacionId");

                    b.HasIndex("OrdenReparacionId");

                    b.HasIndex("ProductoId");

                    b.ToTable("OrdenDetalleReparaciones");
                });

            modelBuilder.Entity("Dominio.Entities.OrdenReparacion", b =>
                {
                    b.Property<int>("NumeroOrden")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("EstadoReparacion")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("FechaEntrega")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaIngreso")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("VehiculoId")
                        .HasColumnType("int");

                    b.HasKey("NumeroOrden");

                    b.HasIndex("VehiculoId");

                    b.ToTable("OrdenesReparacion");
                });

            modelBuilder.Entity("Dominio.Entities.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoriaProductoId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("longtext");

                    b.Property<string>("Marca")
                        .HasColumnType("longtext");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("PrecioCompra")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("PrecioVenta")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaProductoId");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("Dominio.Entities.ProductoProveedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("int");

                    b.Property<int>("ProductoPersonalId")
                        .HasColumnType("int");

                    b.Property<int>("ProveedorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductoPersonalId");

                    b.HasIndex("ProveedorId");

                    b.ToTable("ProductosProveedores");
                });

            modelBuilder.Entity("Dominio.Entities.ProductoReparacion", b =>
                {
                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.Property<int>("DetalleReparacionId")
                        .HasColumnType("int");

                    b.HasKey("ProductoId", "DetalleReparacionId");

                    b.HasIndex("DetalleReparacionId");

                    b.ToTable("ProductosReparaciones");
                });

            modelBuilder.Entity("Dominio.Entities.ProductoSucursal", b =>
                {
                    b.Property<int>("SucursalId")
                        .HasColumnType("int");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.Property<decimal>("Stock")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("StockMinimo")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("SucursalId", "ProductoId");

                    b.HasIndex("ProductoId");

                    b.ToTable("ProductosSucursales");
                });

            modelBuilder.Entity("Dominio.Entities.Profesion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Carrera")
                        .HasColumnType("longtext");

                    b.Property<string>("Universidad")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Profesiones");
                });

            modelBuilder.Entity("Dominio.Entities.ProfesionEmpleado", b =>
                {
                    b.Property<int>("IdProfesion")
                        .HasColumnType("int");

                    b.Property<int>("IdEmpleado")
                        .HasColumnType("int");

                    b.HasKey("IdProfesion", "IdEmpleado");

                    b.HasIndex("IdEmpleado");

                    b.ToTable("ProfesionesEmpleados");
                });

            modelBuilder.Entity("Dominio.Entities.Proveedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("NIT")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TipoProveedorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TipoProveedorId");

                    b.ToTable("Proveedores");
                });

            modelBuilder.Entity("Dominio.Entities.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Regiones");
                });

            modelBuilder.Entity("Dominio.Entities.Sucursal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CiudadId")
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CiudadId");

                    b.ToTable("Sucursales");
                });

            modelBuilder.Entity("Dominio.Entities.TipoProveedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("MonedaTransaccion")
                        .HasColumnType("longtext");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TipoProveedores");
                });

            modelBuilder.Entity("Dominio.Entities.TipoUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Permisos")
                        .HasColumnType("longtext");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TiposUsuario");
                });

            modelBuilder.Entity("Dominio.Entities.TipoVehivulo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TiposVehiculo");
                });

            modelBuilder.Entity("Dominio.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdTipoUsuario")
                        .HasColumnType("int");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("IdTipoUsuario");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Dominio.Entities.Vehiculo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<double>("Kilometraje")
                        .HasColumnType("double");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Modelo")
                        .HasColumnType("longtext");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TipoVehiculoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("TipoVehiculoId");

                    b.ToTable("Vehiculos");
                });

            modelBuilder.Entity("Dominio.Entities.Ciudad", b =>
                {
                    b.HasOne("Dominio.Entities.Region", "Dpto")
                        .WithMany("Ciudades")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dpto");
                });

            modelBuilder.Entity("Dominio.Entities.Cliente", b =>
                {
                    b.HasOne("Dominio.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Dominio.Entities.ClienteSucursal", b =>
                {
                    b.HasOne("Dominio.Entities.Cliente", "Cliente")
                        .WithMany("ClientesSucursales")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Sucursal", "Sucursal")
                        .WithMany("ClientesSucursales")
                        .HasForeignKey("SucursalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Sucursal");
                });

            modelBuilder.Entity("Dominio.Entities.Compra", b =>
                {
                    b.HasOne("Dominio.Entities.Proveedor", "Proveedor")
                        .WithMany("Compras")
                        .HasForeignKey("ProveedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Sucursal", "Sucursal")
                        .WithMany("Compras")
                        .HasForeignKey("SucursalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proveedor");

                    b.Navigation("Sucursal");
                });

            modelBuilder.Entity("Dominio.Entities.CompraProductoP", b =>
                {
                    b.HasOne("Dominio.Entities.Compra", "Compra")
                        .WithMany("ComprasProductosProv")
                        .HasForeignKey("CompraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.ProductoProveedor", "ProductoProveedor")
                        .WithMany()
                        .HasForeignKey("ProductoProveedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Compra");

                    b.Navigation("ProductoProveedor");
                });

            modelBuilder.Entity("Dominio.Entities.ContactoEmpleado", b =>
                {
                    b.HasOne("Dominio.Entities.Contacto", "Contacto")
                        .WithMany("ContactosEmpleados")
                        .HasForeignKey("ContactoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Empleado", "Empleado")
                        .WithMany("ContactosEmpleados")
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contacto");

                    b.Navigation("Empleado");
                });

            modelBuilder.Entity("Dominio.Entities.DiagnosticoEmpleado", b =>
                {
                    b.HasOne("Dominio.Entities.Empleado", "EmpleadoEncargado")
                        .WithMany("DiagnosticosEmpleados")
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.OrdenReparacion", "OrdenReparacion")
                        .WithMany("DiagnosticosEmpleados")
                        .HasForeignKey("OrdenReparacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmpleadoEncargado");

                    b.Navigation("OrdenReparacion");
                });

            modelBuilder.Entity("Dominio.Entities.DiagnosticoInicial", b =>
                {
                    b.HasOne("Dominio.Entities.OrdenReparacion", "OrdenReparacion")
                        .WithOne("DiagnosticoInicial")
                        .HasForeignKey("Dominio.Entities.DiagnosticoInicial", "OrdenReparacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrdenReparacion");
                });

            modelBuilder.Entity("Dominio.Entities.Empleado", b =>
                {
                    b.HasOne("Dominio.Entities.Arl", "Arl")
                        .WithMany("EmpleadosAfiliados")
                        .HasForeignKey("IdArl")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Cargo", "Cargo")
                        .WithMany()
                        .HasForeignKey("IdCargo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Eps", "Eps")
                        .WithMany("EmpleadosAfiliados")
                        .HasForeignKey("IdEps")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Sucursal", null)
                        .WithMany("Empleados")
                        .HasForeignKey("SucursalId");

                    b.Navigation("Arl");

                    b.Navigation("Cargo");

                    b.Navigation("Eps");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Dominio.Entities.Factura", b =>
                {
                    b.HasOne("Dominio.Entities.OrdenReparacion", "OrdenReparacion")
                        .WithOne("Factura")
                        .HasForeignKey("Dominio.Entities.Factura", "OrdenReparacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrdenReparacion");
                });

            modelBuilder.Entity("Dominio.Entities.InspeccionInicial", b =>
                {
                    b.HasOne("Dominio.Entities.OrdenReparacion", "OrdenReparacion")
                        .WithOne("InspeccionInicial")
                        .HasForeignKey("Dominio.Entities.InspeccionInicial", "OrdenReparacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrdenReparacion");
                });

            modelBuilder.Entity("Dominio.Entities.OrdenDetalleReparacion", b =>
                {
                    b.HasOne("Dominio.Entities.DetalleReparacion", "DetalleReparacion")
                        .WithMany("OrdenesReparaciones")
                        .HasForeignKey("DetalleReparacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.OrdenReparacion", "OrdenReparacion")
                        .WithMany("OrdenesReparaciones")
                        .HasForeignKey("OrdenReparacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Producto", null)
                        .WithMany("OrdenesReparaciones")
                        .HasForeignKey("ProductoId");

                    b.Navigation("DetalleReparacion");

                    b.Navigation("OrdenReparacion");
                });

            modelBuilder.Entity("Dominio.Entities.OrdenReparacion", b =>
                {
                    b.HasOne("Dominio.Entities.Vehiculo", "Vehiculo")
                        .WithMany("OrdenesReparacion")
                        .HasForeignKey("VehiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("Dominio.Entities.Producto", b =>
                {
                    b.HasOne("Dominio.Entities.CategoriaProducto", "ProdutoCategoria")
                        .WithMany("Productos")
                        .HasForeignKey("CategoriaProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProdutoCategoria");
                });

            modelBuilder.Entity("Dominio.Entities.ProductoProveedor", b =>
                {
                    b.HasOne("Dominio.Entities.Producto", "Producto")
                        .WithMany("ProductosProveedor")
                        .HasForeignKey("ProductoPersonalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Proveedor", "Proveedor")
                        .WithMany("ProductosProveedores")
                        .HasForeignKey("ProveedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("Dominio.Entities.ProductoReparacion", b =>
                {
                    b.HasOne("Dominio.Entities.DetalleReparacion", "DetalleReparacion")
                        .WithMany("ProductosReparaciones")
                        .HasForeignKey("DetalleReparacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DetalleReparacion");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Dominio.Entities.ProductoSucursal", b =>
                {
                    b.HasOne("Dominio.Entities.Producto", "producto")
                        .WithMany("ProductosSucursasles")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Sucursal", "Sucursal")
                        .WithMany("ProductosSucursales")
                        .HasForeignKey("SucursalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sucursal");

                    b.Navigation("producto");
                });

            modelBuilder.Entity("Dominio.Entities.ProfesionEmpleado", b =>
                {
                    b.HasOne("Dominio.Entities.Empleado", "Empleado")
                        .WithMany("ProfesionesEmpleados")
                        .HasForeignKey("IdEmpleado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Profesion", "Prefesion")
                        .WithMany("ProfesionesEmpleados")
                        .HasForeignKey("IdProfesion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empleado");

                    b.Navigation("Prefesion");
                });

            modelBuilder.Entity("Dominio.Entities.Proveedor", b =>
                {
                    b.HasOne("Dominio.Entities.TipoProveedor", "TipoProveedor")
                        .WithMany("Proveedores")
                        .HasForeignKey("TipoProveedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoProveedor");
                });

            modelBuilder.Entity("Dominio.Entities.Sucursal", b =>
                {
                    b.HasOne("Dominio.Entities.Ciudad", "Ciudad")
                        .WithMany("Sucursales")
                        .HasForeignKey("CiudadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ciudad");
                });

            modelBuilder.Entity("Dominio.Entities.Usuario", b =>
                {
                    b.HasOne("Dominio.Entities.TipoUsuario", "TipUsuario")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdTipoUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipUsuario");
                });

            modelBuilder.Entity("Dominio.Entities.Vehiculo", b =>
                {
                    b.HasOne("Dominio.Entities.Cliente", "Cliente")
                        .WithMany("Vehiculos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.TipoVehivulo", "TipoVehivulo")
                        .WithMany("Vehiculos")
                        .HasForeignKey("TipoVehiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("TipoVehivulo");
                });

            modelBuilder.Entity("Dominio.Entities.Arl", b =>
                {
                    b.Navigation("EmpleadosAfiliados");
                });

            modelBuilder.Entity("Dominio.Entities.CategoriaProducto", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Dominio.Entities.Ciudad", b =>
                {
                    b.Navigation("Sucursales");
                });

            modelBuilder.Entity("Dominio.Entities.Cliente", b =>
                {
                    b.Navigation("ClientesSucursales");

                    b.Navigation("Vehiculos");
                });

            modelBuilder.Entity("Dominio.Entities.Compra", b =>
                {
                    b.Navigation("ComprasProductosProv");
                });

            modelBuilder.Entity("Dominio.Entities.Contacto", b =>
                {
                    b.Navigation("ContactosEmpleados");
                });

            modelBuilder.Entity("Dominio.Entities.DetalleReparacion", b =>
                {
                    b.Navigation("OrdenesReparaciones");

                    b.Navigation("ProductosReparaciones");
                });

            modelBuilder.Entity("Dominio.Entities.Empleado", b =>
                {
                    b.Navigation("ContactosEmpleados");

                    b.Navigation("DiagnosticosEmpleados");

                    b.Navigation("ProfesionesEmpleados");
                });

            modelBuilder.Entity("Dominio.Entities.Eps", b =>
                {
                    b.Navigation("EmpleadosAfiliados");
                });

            modelBuilder.Entity("Dominio.Entities.OrdenReparacion", b =>
                {
                    b.Navigation("DiagnosticoInicial")
                        .IsRequired();

                    b.Navigation("DiagnosticosEmpleados");

                    b.Navigation("Factura")
                        .IsRequired();

                    b.Navigation("InspeccionInicial")
                        .IsRequired();

                    b.Navigation("OrdenesReparaciones");
                });

            modelBuilder.Entity("Dominio.Entities.Producto", b =>
                {
                    b.Navigation("OrdenesReparaciones");

                    b.Navigation("ProductosProveedor");

                    b.Navigation("ProductosSucursasles");
                });

            modelBuilder.Entity("Dominio.Entities.Profesion", b =>
                {
                    b.Navigation("ProfesionesEmpleados");
                });

            modelBuilder.Entity("Dominio.Entities.Proveedor", b =>
                {
                    b.Navigation("Compras");

                    b.Navigation("ProductosProveedores");
                });

            modelBuilder.Entity("Dominio.Entities.Region", b =>
                {
                    b.Navigation("Ciudades");
                });

            modelBuilder.Entity("Dominio.Entities.Sucursal", b =>
                {
                    b.Navigation("ClientesSucursales");

                    b.Navigation("Compras");

                    b.Navigation("Empleados");

                    b.Navigation("ProductosSucursales");
                });

            modelBuilder.Entity("Dominio.Entities.TipoProveedor", b =>
                {
                    b.Navigation("Proveedores");
                });

            modelBuilder.Entity("Dominio.Entities.TipoUsuario", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Dominio.Entities.TipoVehivulo", b =>
                {
                    b.Navigation("Vehiculos");
                });

            modelBuilder.Entity("Dominio.Entities.Vehiculo", b =>
                {
                    b.Navigation("OrdenesReparacion");
                });
#pragma warning restore 612, 618
        }
    }
}
